<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Powitanie itp" id="9" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="179" y="50"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Say1" id="10" localization="8" tooltip="" x="490" y="114"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Animated Say Text" id="7" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="322" y="5"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALAnimatedSpeech')
        self.ttsStop = ALProxy('ALAnimatedSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="random" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Box name="Text Edit" id="8" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="65" y="10"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Hello folks, how are you? ")]]></content></script><pluginContent><text><![CDATA[Hello folks, how are you? ]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="Text Edit (1)" id="1" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="67" y="127"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Enjoying the concert?")]]></content></script><pluginContent><text><![CDATA[Enjoying the concert?]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="Animated Say Text (1)" id="2" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="325" y="125"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALAnimatedSpeech')
        self.ttsStop = ALProxy('ALAnimatedSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="random" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Box name="Stand" id="5" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="501" y="528"><bitmap>media/images/positions/Stand.png</bitmap><script language="4"><content><![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureProxy = None
        try:
            self.postureProxy = ALProxy("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureProxy != None):
            self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.postureProxy != None):
            result = self.postureProxy.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" /><Resource name="All motors" type="Lock" timeout="0" /><Resource name="Stiffness" type="Lock" timeout="0" /></Box><Box name="Text Edit (2)" id="3" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="73" y="249"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("My name is Pepper and I am a humanoid robot - which means I was created to interact with people. ")]]></content></script><pluginContent><text><![CDATA[My name is Pepper and I am a humanoid robot - which means I was created to interact with people. ]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="Animated Say Text (2)" id="4" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="331" y="247"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALAnimatedSpeech')
        self.ttsStop = ALProxy('ALAnimatedSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="random" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Box name="Text Edit (3)" id="6" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="71" y="389"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("I was created in Paris, France, and currently I stay at A G H, here in Kraków. ")]]></content></script><pluginContent><text><![CDATA[I was created in Paris, France, and currently I stay at A G H, here in Kraków. ]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="Animated Say Text (3)" id="9" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="329" y="387"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALAnimatedSpeech')
        self.ttsStop = ALProxy('ALAnimatedSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="random" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Box name="Text Edit (4)" id="10" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="82" y="530"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("I am very happy to meet you!")]]></content></script><pluginContent><text><![CDATA[I am very happy to meet you!]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="Animated Say Text (4)" id="11" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="340" y="528"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALAnimatedSpeech')
        self.ttsStop = ALProxy('ALAnimatedSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="random" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="7" indexofinput="2" outputowner="8" indexofoutput="3" /><Link inputowner="1" indexofinput="2" outputowner="7" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" /><Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" /><Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" /><Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="3" /><Link inputowner="11" indexofinput="2" outputowner="10" indexofoutput="3" /><Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="4" /><Link inputowner="10" indexofinput="2" outputowner="9" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="11" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Stand" id="5" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="333" y="112"><bitmap>media/images/positions/Stand.png</bitmap><script language="4"><content><![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureProxy = None
        try:
            self.postureProxy = ALProxy("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureProxy != None):
            self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.postureProxy != None):
            result = self.postureProxy.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" /><Resource name="All motors" type="Lock" timeout="0" /><Resource name="Stiffness" type="Lock" timeout="0" /></Box><Box name="Wait" id="7" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="642" y="117"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" /></Box><Box name="Say + animals" id="1" localization="8" tooltip="" x="425" y="269"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Animated Say Text" id="7" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="322" y="5"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALAnimatedSpeech')
        self.ttsStop = ALProxy('ALAnimatedSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="random" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Box name="Text Edit" id="8" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="65" y="10"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Look, I can do many incredible things")]]></content></script><pluginContent><text><![CDATA[Look, I can do many incredible things]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="Text Edit (1)" id="1" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="67" y="127"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("like being gorilla")]]></content></script><pluginContent><text><![CDATA[like being gorilla]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="Text Edit (2)" id="3" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="73" y="249"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("or like a mouse.")]]></content></script><pluginContent><text><![CDATA[or like a mouse.]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="Say Text" id="12" localization="8" tooltip="Say the text received on its input." x="333" y="122"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Gorilla" id="2" localization="8" tooltip="ID : #04A 0003&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Gorilla" x="477" y="127"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="116"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="19" value="-6.0463" /><Key frame="31" value="-6.0463" /><Key frame="43" value="-6.0463" /><Key frame="55" value="-6.0463" /><Key frame="73" value="-6.0463" /><Key frame="89" value="-6.0463" /><Key frame="116" value="-11.6132" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="18" value="5" /><Key frame="30" value="-5" /><Key frame="42" value="5" /><Key frame="54" value="-5" /><Key frame="72" value="5" /><Key frame="89" value="-5" /><Key frame="116" value="0.0104437" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="21" value="7.89714" /><Key frame="33" value="7.89714" /><Key frame="45" value="7.89714" /><Key frame="57" value="7.89714" /><Key frame="75" value="7.89714" /><Key frame="91" value="7.89714" /><Key frame="116" value="-2.14349" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="21" value="5" /><Key frame="33" value="-5" /><Key frame="45" value="5" /><Key frame="57" value="-5" /><Key frame="75" value="5" /><Key frame="91" value="-5" /><Key frame="116" value="-0.346687" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="21" value="-0.979096" /><Key frame="33" value="-0.979096" /><Key frame="45" value="-0.979096" /><Key frame="57" value="-0.979096" /><Key frame="75" value="-0.979096" /><Key frame="91" value="-0.979096" /><Key frame="116" value="-0.477106" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="11" value="-31.5" /><Key frame="25" value="-87.7457" /><Key frame="39" value="-0.67216" /><Key frame="51" value="-87.7457" /><Key frame="63" value="-0.67216" /><Key frame="81" value="-87.7457" /><Key frame="97" value="-0.67216" /><Key frame="116" value="-29.8395" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="20" value="-9.62949" /><Key frame="32" value="-19" /><Key frame="44" value="-9.62949" /><Key frame="56" value="-19" /><Key frame="74" value="-9.62949" /><Key frame="90" value="-19" /><Key frame="116" value="-70.0031" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="20" value="0.0284548" /><Key frame="32" value="0.02" /><Key frame="44" value="0.0284548" /><Key frame="56" value="0.02" /><Key frame="74" value="0.0284548" /><Key frame="90" value="0.02" /><Key frame="116" value="0.6" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="20" value="-9.07694" /><Key frame="32" value="8.2" /><Key frame="44" value="-9.07694" /><Key frame="56" value="8.2" /><Key frame="74" value="-9.07694" /><Key frame="90" value="25.7" /><Key frame="116" value="89.2229" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="11" value="19.7" /><Key frame="20" value="10.8237" /><Key frame="32" value="23.4" /><Key frame="44" value="10.8237" /><Key frame="56" value="23.4" /><Key frame="74" value="10.8237" /><Key frame="90" value="23.4" /><Key frame="116" value="8.3288" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="20" value="-55.9097" /><Key frame="32" value="-76.3" /><Key frame="44" value="-55.9097" /><Key frame="56" value="-76.3" /><Key frame="74" value="-55.9097" /><Key frame="90" value="-76.3" /><Key frame="116" value="-0.379539" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="25" value="0.67216" /><Key frame="39" value="87.7457" /><Key frame="51" value="0.67216" /><Key frame="63" value="87.7457" /><Key frame="81" value="0.67216" /><Key frame="97" value="87.7457" /><Key frame="116" value="30.1137" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="20" value="19" /><Key frame="32" value="9.62949" /><Key frame="44" value="19" /><Key frame="56" value="9.62949" /><Key frame="74" value="19" /><Key frame="90" value="9.62949" /><Key frame="116" value="70.2474" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="20" value="0.02" /><Key frame="32" value="0.0284548" /><Key frame="44" value="0.02" /><Key frame="56" value="0.0284548" /><Key frame="74" value="0.02" /><Key frame="90" value="0.0284548" /><Key frame="116" value="0.6" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="20" value="8.2" /><Key frame="32" value="-9.07694" /><Key frame="44" value="8.2" /><Key frame="56" value="-9.07694" /><Key frame="74" value="8.2" /><Key frame="90" value="-9.07694" /><Key frame="116" value="88.8048" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="20" value="-23.4" /><Key frame="32" value="-10.8237" /><Key frame="44" value="-23.4" /><Key frame="56" value="-10.8237" /><Key frame="74" value="-23.4" /><Key frame="90" value="-10.8237" /><Key frame="116" value="-8.63641" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="20" value="76.3" /><Key frame="32" value="55.9097" /><Key frame="44" value="76.3" /><Key frame="56" value="55.9097" /><Key frame="74" value="76.3" /><Key frame="90" value="55.9097" /><Key frame="116" value="0.16519" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="Mouse" id="14" localization="8" tooltip="ID : #04A 0002&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Mouse" x="459" y="243"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="130"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram /></BehaviorKeyframe></BehaviorLayer><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="20" value="-3.6" /><Key frame="24" value="-6.9" /><Key frame="27" value="-3.6" /><Key frame="29" value="-6.9" /><Key frame="31" value="-2.2" /><Key frame="34" value="-6.9" /><Key frame="37" value="-2.2" /><Key frame="47" value="-3.6" /><Key frame="49" value="-6.9" /><Key frame="51" value="-2.2" /><Key frame="53" value="-6.9" /><Key frame="55" value="-2.2" /><Key frame="61" value="-25.5" /><Key frame="69" value="-25.5" /><Key frame="74" value="-6.9" /><Key frame="77" value="-3.6" /><Key frame="79" value="-6.9" /><Key frame="81" value="-2.2" /><Key frame="84" value="-6.9" /><Key frame="87" value="-2.2" /><Key frame="96" value="-3.6" /><Key frame="98" value="-6.9" /><Key frame="100" value="-2.2" /><Key frame="103" value="-6.9" /><Key frame="106" value="-2.2" /><Key frame="130" value="-12.5684" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="20" value="0" /><Key frame="130" value="0.175782" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="20" value="-44.1065" /><Key frame="106" value="-44.1065" /><Key frame="130" value="-2.02149" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="20" value="0" /><Key frame="106" value="0" /><Key frame="130" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="20" value="24.9461" /><Key frame="106" value="24.9461" /><Key frame="130" value="0.0878909" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="20" value="-82.002" /><Key frame="106" value="-82.002" /><Key frame="130" value="-29.9707" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="20" value="-56.5137" /><Key frame="106" value="-56.5137" /><Key frame="130" value="-71.0156" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="20" value="0.13181" /><Key frame="24" value="0.3" /><Key frame="27" value="0.16" /><Key frame="29" value="0.29" /><Key frame="31" value="0.17" /><Key frame="34" value="0.29" /><Key frame="37" value="0.17" /><Key frame="47" value="0.16" /><Key frame="49" value="0.29" /><Key frame="51" value="0.17" /><Key frame="53" value="0.29" /><Key frame="55" value="0.17" /><Key frame="74" value="0.3" /><Key frame="77" value="0.16" /><Key frame="79" value="0.29" /><Key frame="81" value="0.17" /><Key frame="84" value="0.29" /><Key frame="87" value="0.17" /><Key frame="96" value="0.16" /><Key frame="98" value="0.29" /><Key frame="100" value="0.17" /><Key frame="103" value="0.29" /><Key frame="106" value="0.17" /><Key frame="130" value="0.593146" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="20" value="1.49414" /><Key frame="55" value="1.49414" /><Key frame="61" value="5.9" /><Key frame="69" value="5.9" /><Key frame="74" value="1.49414" /><Key frame="106" value="1.49414" /><Key frame="130" value="89.2969" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="20" value="3.60351" /><Key frame="106" value="3.60351" /><Key frame="130" value="7.73437" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="20" value="-52.1222" /><Key frame="106" value="-52.1222" /><Key frame="130" value="-0.793436" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="20" value="82.0898" /><Key frame="106" value="82.0898" /><Key frame="130" value="29.707" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="20" value="54.4922" /><Key frame="106" value="54.4922" /><Key frame="130" value="70.752" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="20" value="0.13181" /><Key frame="24" value="0.3" /><Key frame="27" value="0.16" /><Key frame="29" value="0.29" /><Key frame="31" value="0.17" /><Key frame="34" value="0.29" /><Key frame="37" value="0.17" /><Key frame="47" value="0.16" /><Key frame="49" value="0.29" /><Key frame="51" value="0.17" /><Key frame="53" value="0.29" /><Key frame="55" value="0.17" /><Key frame="74" value="0.3" /><Key frame="77" value="0.16" /><Key frame="79" value="0.29" /><Key frame="81" value="0.17" /><Key frame="84" value="0.29" /><Key frame="87" value="0.17" /><Key frame="96" value="0.16" /><Key frame="98" value="0.29" /><Key frame="100" value="0.17" /><Key frame="103" value="0.29" /><Key frame="106" value="0.17" /><Key frame="130" value="0.594903" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="20" value="1.05469" /><Key frame="55" value="1.05469" /><Key frame="61" value="12.6" /><Key frame="69" value="12.6" /><Key frame="74" value="1.05469" /><Key frame="106" value="1.05469" /><Key frame="130" value="88.418" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="20" value="-1.58204" /><Key frame="106" value="-1.58204" /><Key frame="130" value="-7.29493" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="20" value="51.9416" /><Key frame="106" value="51.9416" /><Key frame="130" value="0.788627" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="Say Text (1)" id="4" localization="8" tooltip="Say the text received on its input." x="334" y="248"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="7" indexofinput="2" outputowner="8" indexofoutput="3" /><Link inputowner="12" indexofinput="2" outputowner="1" indexofoutput="3" /><Link inputowner="2" indexofinput="2" outputowner="12" indexofoutput="4" /><Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" /><Link inputowner="14" indexofinput="2" outputowner="4" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="7" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="14" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Stand (1)" id="3" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="288" y="268"><bitmap>media/images/positions/Stand.png</bitmap><script language="4"><content><![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureProxy = None
        try:
            self.postureProxy = ALProxy("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureProxy != None):
            self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.postureProxy != None):
            result = self.postureProxy.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" /><Resource name="All motors" type="Lock" timeout="0" /><Resource name="Stiffness" type="Lock" timeout="0" /></Box><Box name="Wait (1)" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="577" y="272"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" /></Box><Box name="Say + music" id="6" localization="8" tooltip="" x="414" y="407"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Animated Say Text" id="7" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="322" y="5"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALAnimatedSpeech')
        self.ttsStop = ALProxy('ALAnimatedSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="random" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Box name="Text Edit" id="8" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="65" y="10"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(" I love music and I can dance ")]]></content></script><pluginContent><text><![CDATA[ I love music and I can dance ]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="Text Edit (1)" id="1" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="44" y="158"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("I’m still working on my singing skills. ")]]></content></script><pluginContent><text><![CDATA[I’m still working on my singing skills. ]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="Text Edit (2)" id="3" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="79" y="493"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Maybe I can sing with you  next year.")]]></content></script><pluginContent><text><![CDATA[Maybe I can sing with you  next year.]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="Stand (1)" id="13" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="460" y="23"><bitmap>media/images/positions/Stand.png</bitmap><script language="4"><content><![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureProxy = None
        try:
            self.postureProxy = ALProxy("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureProxy != None):
            self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.postureProxy != None):
            result = self.postureProxy.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" /><Resource name="All motors" type="Lock" timeout="0" /><Resource name="Stiffness" type="Lock" timeout="0" /></Box><Box name="Stand (3)" id="16" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="474" y="490"><bitmap>media/images/positions/Stand.png</bitmap><script language="4"><content><![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureProxy = None
        try:
            self.postureProxy = ALProxy("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureProxy != None):
            self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.postureProxy != None):
            result = self.postureProxy.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" /><Resource name="All motors" type="Lock" timeout="0" /><Resource name="Stiffness" type="Lock" timeout="0" /></Box><Box name="Animated Say Text (1)" id="6" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="298" y="154"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALAnimatedSpeech')
        self.ttsStop = ALProxy('ALAnimatedSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="random" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Box name="Guitar" id="4" localization="8" tooltip="ID : #04D 0002&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Entertainment&#x0A;- Dances&#x0A;- Headbang" x="536" y="142"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="287"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="26" value="7.55628" /><Key frame="39" value="-0.529755" /><Key frame="50" value="15.2908" /><Key frame="75" value="-14.9715" /><Key frame="86" value="9.40201" /><Key frame="92" value="-11.5437" /><Key frame="102" value="11.9509" /><Key frame="110" value="3.1617" /><Key frame="120" value="-13.5183" /><Key frame="127" value="5.49971" /><Key frame="140" value="13.8553" /><Key frame="151" value="-9.40302" /><Key frame="160" value="-13.0066" /><Key frame="171" value="4.26921" /><Key frame="178" value="10.5974" /><Key frame="212" value="-15.825" /><Key frame="220" value="6.77121" /><Key frame="233" value="-6.50261" /><Key frame="243" value="8.61691" /><Key frame="281" value="-11.0006" /><Key frame="287" value="-11.2138" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="26" value="14.6755" /><Key frame="39" value="13.6208" /><Key frame="67" value="7.46839" /><Key frame="75" value="0.612838" /><Key frame="92" value="1.93121" /><Key frame="110" value="17.7517" /><Key frame="120" value="17.2244" /><Key frame="127" value="21.4432" /><Key frame="140" value="20.3496" /><Key frame="151" value="13.1814" /><Key frame="160" value="13.0056" /><Key frame="171" value="15.2908" /><Key frame="188" value="14.9392" /><Key frame="220" value="-6.56512" /><Key frame="243" value="-0.178188" /><Key frame="266" value="11.1598" /><Key frame="281" value="0.210386" /><Key frame="287" value="0.163687" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="12" value="-1.97851" /><Key frame="36" value="-24.0718" /><Key frame="47" value="-17.3873" /><Key frame="117" value="-17.0612" /><Key frame="129" value="-6.50907" /><Key frame="148" value="-6.50907" /><Key frame="168" value="-17.1692" /><Key frame="185" value="-17.1692" /><Key frame="198" value="-6.10369" /><Key frame="217" value="-17.2009" /><Key frame="231" value="-16.6204" /><Key frame="244" value="-22.5053" /><Key frame="251" value="-21.8842" /><Key frame="268" value="-18.1128" /><Key frame="281" value="-3.23608" /><Key frame="287" value="-2.74407" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="12" value="-0.433542" /><Key frame="36" value="-2.28016" /><Key frame="47" value="-8.11443" /><Key frame="64" value="-3.91495" /><Key frame="89" value="-9.71783" /><Key frame="129" value="-7.46617" /><Key frame="148" value="-0.175686" /><Key frame="168" value="3.53842" /><Key frame="185" value="3.53842" /><Key frame="198" value="0.269135" /><Key frame="217" value="3.39891" /><Key frame="231" value="3.39891" /><Key frame="268" value="-2.66845" /><Key frame="281" value="-0.362005" /><Key frame="287" value="-0.133749" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="12" value="-0.573235" /><Key frame="36" value="13.6999" /><Key frame="47" value="9.20669" /><Key frame="117" value="9.20669" /><Key frame="129" value="1.90279" /><Key frame="148" value="1.90279" /><Key frame="168" value="9.84374" /><Key frame="185" value="9.84374" /><Key frame="198" value="1.91406" /><Key frame="217" value="10.2565" /><Key frame="231" value="10.2565" /><Key frame="244" value="16.6653" /><Key frame="251" value="16.0867" /><Key frame="268" value="9.04071" /><Key frame="281" value="-0.173133" /><Key frame="287" value="-0.659074" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="12" value="-37" /><Key frame="23" value="-58.545" /><Key frame="36" value="-58.0177" /><Key frame="47" value="-61.5333" /><Key frame="64" value="-73.2229" /><Key frame="83" value="-66.8068" /><Key frame="89" value="-66.8947" /><Key frame="99" value="-66.5432" /><Key frame="107" value="-66.1037" /><Key frame="117" value="-60.3907" /><Key frame="124" value="-70.1467" /><Key frame="137" value="-73.2229" /><Key frame="148" value="-72.1682" /><Key frame="157" value="-67.6857" /><Key frame="168" value="-73.3108" /><Key frame="175" value="-69.883" /><Key frame="185" value="-70.1467" /><Key frame="198" value="-63.2033" /><Key frame="209" value="-64.6974" /><Key frame="217" value="-64.8732" /><Key frame="230" value="-61.2697" /><Key frame="240" value="-60.5665" /><Key frame="248" value="-59.0724" /><Key frame="263" value="-67.6094" /><Key frame="274" value="-52.5" /><Key frame="281" value="-33.5273" /><Key frame="287" value="-29.9557" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="12" value="-91" /><Key frame="23" value="-116.723" /><Key frame="36" value="-110" /><Key frame="47" value="-111.625" /><Key frame="64" value="-92.4645" /><Key frame="83" value="-102.924" /><Key frame="89" value="-103.978" /><Key frame="99" value="-91.8493" /><Key frame="107" value="-93.695" /><Key frame="117" value="-102.308" /><Key frame="124" value="-93.8708" /><Key frame="137" value="-92.7282" /><Key frame="148" value="-87.5426" /><Key frame="157" value="-90.0914" /><Key frame="168" value="-76.2045" /><Key frame="175" value="-79.3686" /><Key frame="185" value="-70.8431" /><Key frame="198" value="-78.9292" /><Key frame="209" value="-85.6089" /><Key frame="217" value="-86.6636" /><Key frame="230" value="-76.8198" /><Key frame="240" value="-84.4664" /><Key frame="248" value="-85.2574" /><Key frame="263" value="-65.6575" /><Key frame="274" value="-59.2" /><Key frame="281" value="-68.5901" /><Key frame="287" value="-70.7426" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="12" value="0.636364" /><Key frame="23" value="0.345455" /><Key frame="36" value="0.254545" /><Key frame="47" value="0.381818" /><Key frame="89" value="0.366571" /><Key frame="99" value="0.0909091" /><Key frame="107" value="0.127273" /><Key frame="124" value="0.218182" /><Key frame="137" value="0.343298" /><Key frame="148" value="0.254545" /><Key frame="157" value="0.332753" /><Key frame="168" value="0.127273" /><Key frame="175" value="0.127273" /><Key frame="198" value="0.254545" /><Key frame="209" value="0.127273" /><Key frame="217" value="0.0909091" /><Key frame="230" value="0.176364" /><Key frame="240" value="0.0909091" /><Key frame="263" value="0.145455" /><Key frame="281" value="0.589875" /><Key frame="287" value="0.597963" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="23" value="32.0315" /><Key frame="36" value="29.3948" /><Key frame="47" value="24.0334" /><Key frame="64" value="27.8127" /><Key frame="83" value="28.7795" /><Key frame="89" value="27.3732" /><Key frame="99" value="25.6154" /><Key frame="107" value="25.0002" /><Key frame="117" value="32.2952" /><Key frame="124" value="33.4378" /><Key frame="137" value="34.7562" /><Key frame="148" value="36.3382" /><Key frame="157" value="38.6234" /><Key frame="168" value="36.9534" /><Key frame="175" value="36.6898" /><Key frame="185" value="37.5687" /><Key frame="198" value="31.9436" /><Key frame="209" value="35.1956" /><Key frame="217" value="33.8772" /><Key frame="230" value="28.5158" /><Key frame="240" value="30.6252" /><Key frame="248" value="29.9221" /><Key frame="263" value="20.437" /><Key frame="281" value="86.9996" /><Key frame="287" value="89.0357" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="23" value="29.7929" /><Key frame="36" value="29.4413" /><Key frame="47" value="27.6835" /><Key frame="64" value="26.453" /><Key frame="83" value="48.4259" /><Key frame="89" value="51.6779" /><Key frame="99" value="32.3418" /><Key frame="107" value="32.5175" /><Key frame="117" value="58.9729" /><Key frame="124" value="56.0725" /><Key frame="137" value="56.4241" /><Key frame="148" value="43.5919" /><Key frame="157" value="51.4143" /><Key frame="168" value="47.3712" /><Key frame="175" value="47.4591" /><Key frame="185" value="36.5606" /><Key frame="198" value="36.6484" /><Key frame="209" value="51.0627" /><Key frame="217" value="46.0529" /><Key frame="230" value="22.6737" /><Key frame="240" value="25.3104" /><Key frame="248" value="26.1014" /><Key frame="263" value="39.6368" /><Key frame="281" value="9.16962" /><Key frame="287" value="8.51138" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="12" value="-72" /><Key frame="23" value="-80" /><Key frame="36" value="-87" /><Key frame="47" value="-83" /><Key frame="64" value="-86" /><Key frame="83" value="-100" /><Key frame="89" value="-104" /><Key frame="107" value="-81.478" /><Key frame="117" value="-104" /><Key frame="124" value="-104.066" /><Key frame="137" value="-104.496" /><Key frame="157" value="-104.496" /><Key frame="175" value="-100.551" /><Key frame="198" value="-98.529" /><Key frame="217" value="-104.242" /><Key frame="240" value="-88.0699" /><Key frame="263" value="-98" /><Key frame="281" value="-3.1253" /><Key frame="287" value="-0.328876" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="24" value="71.6962" /><Key frame="37" value="75.6513" /><Key frame="48" value="53.5905" /><Key frame="55" value="68.0048" /><Key frame="65" value="59.3035" /><Key frame="73" value="50.778" /><Key frame="84" value="42.6041" /><Key frame="90" value="42.6041" /><Key frame="100" value="62.2918" /><Key frame="108" value="54.3815" /><Key frame="118" value="68.7079" /><Key frame="125" value="48.9676" /><Key frame="138" value="37.7643" /><Key frame="149" value="71.872" /><Key frame="158" value="52.6237" /><Key frame="164" value="76.433" /><Key frame="169" value="55.6999" /><Key frame="176" value="72.8388" /><Key frame="186" value="47.3502" /><Key frame="199" value="36.5395" /><Key frame="210" value="72.9267" /><Key frame="218" value="53.9421" /><Key frame="225" value="71.3447" /><Key frame="231" value="47.7018" /><Key frame="241" value="73.1025" /><Key frame="249" value="51.5752" /><Key frame="264" value="31.7116" /><Key frame="275" value="44.6" /><Key frame="281" value="33.7262" /><Key frame="287" value="29.9781" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="24" value="32.4813" /><Key frame="37" value="41.2705" /><Key frame="48" value="7.02893" /><Key frame="55" value="27.3319" /><Key frame="65" value="23.992" /><Key frame="73" value="5.71056" /><Key frame="84" value="-3.51807" /><Key frame="90" value="-3.69386" /><Key frame="100" value="25.7499" /><Key frame="108" value="1.14019" /><Key frame="118" value="37.2379" /><Key frame="125" value="0.349163" /><Key frame="138" value="7.90785" /><Key frame="149" value="35.9453" /><Key frame="158" value="8.87466" /><Key frame="164" value="41.1309" /><Key frame="169" value="8.78677" /><Key frame="176" value="33.6601" /><Key frame="186" value="13.5329" /><Key frame="199" value="13.3571" /><Key frame="210" value="35.1543" /><Key frame="218" value="14.3239" /><Key frame="225" value="39.8125" /><Key frame="231" value="-0.79343" /><Key frame="241" value="26.6288" /><Key frame="249" value="4.74375" /><Key frame="264" value="13.8845" /><Key frame="275" value="68.1" /><Key frame="281" value="69.6515" /><Key frame="287" value="69.9674" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="24" value="0.454545" /><Key frame="37" value="0.45348" /><Key frame="48" value="0.672727" /><Key frame="55" value="0.287273" /><Key frame="65" value="0.381818" /><Key frame="84" value="0.690909" /><Key frame="90" value="0.654545" /><Key frame="100" value="0.305455" /><Key frame="108" value="0.418182" /><Key frame="118" value="0.345455" /><Key frame="125" value="0.654545" /><Key frame="138" value="0.749091" /><Key frame="158" value="0.469091" /><Key frame="164" value="0.327273" /><Key frame="169" value="0.436364" /><Key frame="176" value="0.318182" /><Key frame="186" value="0.545455" /><Key frame="199" value="0.727273" /><Key frame="210" value="0.436364" /><Key frame="218" value="0.729115" /><Key frame="225" value="0.490909" /><Key frame="231" value="0.618182" /><Key frame="241" value="0.490909" /><Key frame="249" value="0.745455" /><Key frame="264" value="0.662205" /><Key frame="281" value="0.613137" /><Key frame="287" value="0.607433" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="24" value="25.2015" /><Key frame="37" value="25.641" /><Key frame="48" value="31.8813" /><Key frame="55" value="26.6078" /><Key frame="65" value="26.3441" /><Key frame="73" value="30.2113" /><Key frame="84" value="32.5844" /><Key frame="90" value="33.3754" /><Key frame="100" value="22.8284" /><Key frame="108" value="27.4867" /><Key frame="118" value="12.2814" /><Key frame="125" value="40.9341" /><Key frame="138" value="48.7565" /><Key frame="149" value="42.1646" /><Key frame="158" value="44.5377" /><Key frame="164" value="34.9575" /><Key frame="169" value="38.2974" /><Key frame="176" value="35.3969" /><Key frame="186" value="51.3932" /><Key frame="199" value="57.0183" /><Key frame="210" value="31.9692" /><Key frame="218" value="39.1763" /><Key frame="225" value="20.2796" /><Key frame="231" value="33.9028" /><Key frame="241" value="26.5199" /><Key frame="249" value="35.6606" /><Key frame="264" value="57.1062" /><Key frame="281" value="88.5927" /><Key frame="287" value="89.1702" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="24" value="-31.5969" /><Key frame="37" value="-27.2903" /><Key frame="48" value="-22.3424" /><Key frame="55" value="-21.112" /><Key frame="65" value="-19.442" /><Key frame="73" value="-21.3756" /><Key frame="84" value="-21.3756" /><Key frame="90" value="-21.5514" /><Key frame="100" value="-15.5748" /><Key frame="108" value="-18.1236" /><Key frame="118" value="-15.6627" /><Key frame="125" value="-30.9558" /><Key frame="138" value="-32.0984" /><Key frame="149" value="-28.4948" /><Key frame="158" value="-28.3191" /><Key frame="164" value="-27.0007" /><Key frame="169" value="-25.946" /><Key frame="176" value="-23.7487" /><Key frame="186" value="-25.5065" /><Key frame="199" value="-25.946" /><Key frame="210" value="-26.737" /><Key frame="218" value="-32.1863" /><Key frame="225" value="-26.6491" /><Key frame="231" value="-28.2312" /><Key frame="241" value="-26.6491" /><Key frame="249" value="-20.9362" /><Key frame="264" value="-44.1396" /><Key frame="281" value="-9.99848" /><Key frame="287" value="-8.75354" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="24" value="58" /><Key frame="37" value="57.6546" /><Key frame="55" value="56.6878" /><Key frame="65" value="56.5999" /><Key frame="90" value="57.5667" /><Key frame="100" value="58.6214" /><Key frame="125" value="59.3245" /><Key frame="138" value="58.5335" /><Key frame="158" value="58.9729" /><Key frame="169" value="58.6214" /><Key frame="186" value="57.303" /><Key frame="210" value="68" /><Key frame="218" value="47" /><Key frame="225" value="63" /><Key frame="231" value="53" /><Key frame="241" value="59" /><Key frame="249" value="49" /><Key frame="264" value="44" /><Key frame="281" value="0.980029" /><Key frame="287" value="0.060775" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="Wait For Signals" id="9" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="617" y="256"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" /><Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" /><Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" /></Box><Box name="Text Edit (3)" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="96" y="273"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("ouououououououo")]]></content></script><pluginContent><text><![CDATA[ouououououououo]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="Animated Say Text (2)" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="335" y="485"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALAnimatedSpeech')
        self.ttsStop = ALProxy('ALAnimatedSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="random" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Box name="Animated Say Text (3)" id="11" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="410" y="253"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALAnimatedSpeech')
        self.ttsStop = ALProxy('ALAnimatedSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="random" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Box name="HSNT" id="12" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="595" y="30"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Play Sound" id="5" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="285" y="47"><bitmap>media/images/box/interaction/play_music.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" /><Input name="STOP" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="5" /><Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../html/HSNT.mp3" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="6" /><Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="7" /><Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="8" /><Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="9" /><Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="10" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70"><bitmap>media/images/box/interaction/play_music.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.player = ALProxy('ALAudioPlayer')
        self.playerStop = ALProxy('ALAudioPlayer', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.post.playFileInLoop(p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.post.playFileFromPosition(p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" /><Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" /><Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" /><Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" /></Box><Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71"><bitmap>media/images/box/folder.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")

    def onInput_onStart(self):
        self.onStopped(self.framemanager.getBehaviorPath(self.behaviorId) + self.getParameter("File name"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" /><Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" /></Box><Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" /><Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="Audio player" type="Lock" timeout="0" /></Box><Box name="Go to position Shoulder" id="12" localization="8" tooltip="Robot will go to the position Shoulder&lt;br/&gt;Position description : " x="290" y="175"><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="-1"><Key frame="40" value="-13.1836" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="-1"><Key frame="40" value="-4.21875" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="-1"><Key frame="40" value="-2.8125" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="-1"><Key frame="40" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="-1"><Key frame="40" value="-1.49414" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1"><Key frame="40" value="-79.8044" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1"><Key frame="40" value="-0.0878912" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1"><Key frame="40" value="0.93761" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1"><Key frame="40" value="-17.0508" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1"><Key frame="40" value="50.0977" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1"><Key frame="40" value="-88.2458" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1"><Key frame="40" value="79.2773" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1"><Key frame="40" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1"><Key frame="40" value="0.931459" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1"><Key frame="40" value="-16.3477" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1"><Key frame="40" value="-50.0977" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1"><Key frame="40" value="88.0653" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Wait_S1" id="14" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="443" y="325"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="9.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" /></Box><Box name="Rhythm" id="18" localization="8" tooltip="" x="586" y="185"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="120"><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="10" value="-11.4258" /><Key frame="15" value="-11.4258" /><Key frame="25" value="-14.8535" /><Key frame="30" value="-14.8535" /><Key frame="40" value="-11.1621" /><Key frame="45" value="-11.1621" /><Key frame="55" value="-14.8535" /><Key frame="60" value="-14.8535" /><Key frame="70" value="-11.1621" /><Key frame="75" value="-11.1621" /><Key frame="85" value="-14.8535" /><Key frame="90" value="-14.8535" /><Key frame="100" value="-11.1621" /><Key frame="105" value="-11.1621" /><Key frame="115" value="-14.8535" /><Key frame="120" value="-14.8535" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="10" value="-2.54882" /><Key frame="15" value="-2.54882" /><Key frame="25" value="-7.64648" /><Key frame="30" value="-7.64648" /><Key frame="40" value="-2.02149" /><Key frame="45" value="-2.02149" /><Key frame="55" value="-7.64648" /><Key frame="60" value="-7.64648" /><Key frame="70" value="-2.02149" /><Key frame="75" value="-2.02149" /><Key frame="85" value="-7.64648" /><Key frame="90" value="-7.64648" /><Key frame="100" value="-2.02149" /><Key frame="105" value="-2.02149" /><Key frame="115" value="-7.64648" /><Key frame="120" value="-7.64648" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="10" value="-3.60351" /><Key frame="15" value="-3.60351" /><Key frame="25" value="-3.16406" /><Key frame="30" value="-3.16406" /><Key frame="40" value="-3.16406" /><Key frame="45" value="-3.16406" /><Key frame="55" value="-3.16406" /><Key frame="60" value="-3.16406" /><Key frame="70" value="-3.16406" /><Key frame="75" value="-3.16406" /><Key frame="85" value="-3.16406" /><Key frame="90" value="-3.16406" /><Key frame="100" value="-3.16406" /><Key frame="105" value="-3.16406" /><Key frame="115" value="-3.16406" /><Key frame="120" value="-3.16406" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="10" value="-0.263673" /><Key frame="15" value="-0.263673" /><Key frame="25" value="-0.263673" /><Key frame="30" value="-0.263673" /><Key frame="40" value="-0.263673" /><Key frame="45" value="-0.263673" /><Key frame="55" value="-0.263673" /><Key frame="60" value="-0.263673" /><Key frame="70" value="-0.263673" /><Key frame="75" value="-0.263673" /><Key frame="85" value="-0.263673" /><Key frame="90" value="-0.263673" /><Key frame="100" value="-0.263673" /><Key frame="105" value="-0.263673" /><Key frame="115" value="-0.263673" /><Key frame="120" value="-0.263673" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="10" value="-2.90039" /><Key frame="15" value="-2.90039" /><Key frame="25" value="-2.28516" /><Key frame="30" value="-2.28516" /><Key frame="40" value="-2.28516" /><Key frame="45" value="-2.28516" /><Key frame="55" value="-2.28516" /><Key frame="60" value="-2.28516" /><Key frame="70" value="-2.28516" /><Key frame="75" value="-2.28516" /><Key frame="85" value="-2.28516" /><Key frame="90" value="-2.28516" /><Key frame="100" value="-2.28516" /><Key frame="105" value="-2.28516" /><Key frame="115" value="-2.28516" /><Key frame="120" value="-2.28516" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="10" value="-80.332" /><Key frame="15" value="-80.332" /><Key frame="25" value="-80.1562" /><Key frame="30" value="-80.1562" /><Key frame="40" value="-80.1562" /><Key frame="45" value="-80.1562" /><Key frame="55" value="-80.1562" /><Key frame="60" value="-80.1562" /><Key frame="70" value="-80.1562" /><Key frame="75" value="-80.1562" /><Key frame="85" value="-80.1562" /><Key frame="90" value="-80.1562" /><Key frame="100" value="-80.1562" /><Key frame="105" value="-80.1562" /><Key frame="115" value="-80.1562" /><Key frame="120" value="-80.1562" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="10" value="-0.439454" /><Key frame="15" value="-0.439454" /><Key frame="25" value="-0.878909" /><Key frame="30" value="-0.878909" /><Key frame="40" value="-0.0878909" /><Key frame="45" value="-0.0878909" /><Key frame="55" value="-0.878909" /><Key frame="60" value="-0.878909" /><Key frame="70" value="-0.0878909" /><Key frame="75" value="-0.0878909" /><Key frame="85" value="-0.878909" /><Key frame="90" value="-0.878909" /><Key frame="100" value="-0.0878909" /><Key frame="105" value="-0.0878909" /><Key frame="115" value="-0.878909" /><Key frame="120" value="-0.878909" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="10" value="0.876098" /><Key frame="15" value="0.876098" /><Key frame="25" value="0.876098" /><Key frame="30" value="0.876098" /><Key frame="40" value="0.876098" /><Key frame="45" value="0.876098" /><Key frame="55" value="0.876098" /><Key frame="60" value="0.876098" /><Key frame="70" value="0.876098" /><Key frame="75" value="0.876098" /><Key frame="85" value="0.876098" /><Key frame="90" value="0.876098" /><Key frame="100" value="0.876098" /><Key frame="105" value="0.876098" /><Key frame="115" value="0.876098" /><Key frame="120" value="0.876098" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="10" value="-16.5234" /><Key frame="15" value="-16.5234" /><Key frame="25" value="-17.8418" /><Key frame="30" value="-17.8418" /><Key frame="40" value="-16.6113" /><Key frame="45" value="-16.6113" /><Key frame="55" value="-17.8418" /><Key frame="60" value="-17.8418" /><Key frame="70" value="-16.6113" /><Key frame="75" value="-16.6113" /><Key frame="85" value="-17.8418" /><Key frame="90" value="-17.8418" /><Key frame="100" value="-16.6113" /><Key frame="105" value="-16.6113" /><Key frame="115" value="-17.8418" /><Key frame="120" value="-17.8418" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="10" value="41.9238" /><Key frame="15" value="41.9238" /><Key frame="25" value="49.4824" /><Key frame="30" value="49.4824" /><Key frame="40" value="40.957" /><Key frame="45" value="40.957" /><Key frame="55" value="49.4824" /><Key frame="60" value="49.4824" /><Key frame="70" value="40.957" /><Key frame="75" value="40.957" /><Key frame="85" value="49.4824" /><Key frame="90" value="49.4824" /><Key frame="100" value="40.957" /><Key frame="105" value="40.957" /><Key frame="115" value="49.4824" /><Key frame="120" value="49.4824" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="10" value="-85.6968" /><Key frame="15" value="-85.6968" /><Key frame="25" value="-85.9605" /><Key frame="30" value="-85.9605" /><Key frame="40" value="-85.9605" /><Key frame="45" value="-85.9605" /><Key frame="55" value="-85.9605" /><Key frame="60" value="-85.9605" /><Key frame="70" value="-85.9605" /><Key frame="75" value="-85.9605" /><Key frame="85" value="-85.9605" /><Key frame="90" value="-85.9605" /><Key frame="100" value="-85.9605" /><Key frame="105" value="-85.9605" /><Key frame="115" value="-85.9605" /><Key frame="120" value="-85.9605" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="10" value="79.6289" /><Key frame="15" value="79.6289" /><Key frame="25" value="79.1016" /><Key frame="30" value="79.1016" /><Key frame="40" value="79.8926" /><Key frame="45" value="79.8926" /><Key frame="55" value="79.1016" /><Key frame="60" value="79.1016" /><Key frame="70" value="79.8926" /><Key frame="75" value="79.8926" /><Key frame="85" value="79.1016" /><Key frame="90" value="79.1016" /><Key frame="100" value="79.8926" /><Key frame="105" value="79.8926" /><Key frame="115" value="79.1016" /><Key frame="120" value="79.1016" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="10" value="0.615236" /><Key frame="15" value="0.615236" /><Key frame="25" value="0.351564" /><Key frame="30" value="0.351564" /><Key frame="40" value="0.351564" /><Key frame="45" value="0.351564" /><Key frame="55" value="0.351564" /><Key frame="60" value="0.351564" /><Key frame="70" value="0.351564" /><Key frame="75" value="0.351564" /><Key frame="85" value="0.351564" /><Key frame="90" value="0.351564" /><Key frame="100" value="0.351564" /><Key frame="105" value="0.351564" /><Key frame="115" value="0.351564" /><Key frame="120" value="0.351564" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="10" value="0.862917" /><Key frame="15" value="0.862917" /><Key frame="25" value="0.863796" /><Key frame="30" value="0.863796" /><Key frame="40" value="0.877856" /><Key frame="45" value="0.877856" /><Key frame="55" value="0.863796" /><Key frame="60" value="0.863796" /><Key frame="70" value="0.877856" /><Key frame="75" value="0.877856" /><Key frame="85" value="0.863796" /><Key frame="90" value="0.863796" /><Key frame="100" value="0.877856" /><Key frame="105" value="0.877856" /><Key frame="115" value="0.863796" /><Key frame="120" value="0.863796" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="10" value="-16.084" /><Key frame="15" value="-16.084" /><Key frame="25" value="-18.2812" /><Key frame="30" value="-18.2812" /><Key frame="40" value="-15.8203" /><Key frame="45" value="-15.8203" /><Key frame="55" value="-18.2812" /><Key frame="60" value="-18.2812" /><Key frame="70" value="-15.8203" /><Key frame="75" value="-15.8203" /><Key frame="85" value="-18.2812" /><Key frame="90" value="-18.2812" /><Key frame="100" value="-15.8203" /><Key frame="105" value="-15.8203" /><Key frame="115" value="-18.2812" /><Key frame="120" value="-18.2812" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="10" value="-41.9238" /><Key frame="15" value="-41.9238" /><Key frame="25" value="-49.834" /><Key frame="30" value="-49.834" /><Key frame="40" value="-40.6934" /><Key frame="45" value="-40.6934" /><Key frame="55" value="-49.834" /><Key frame="60" value="-49.834" /><Key frame="70" value="-40.6934" /><Key frame="75" value="-40.6934" /><Key frame="85" value="-49.834" /><Key frame="90" value="-49.834" /><Key frame="100" value="-40.6934" /><Key frame="105" value="-40.6934" /><Key frame="115" value="-49.834" /><Key frame="120" value="-49.834" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="10" value="85.2526" /><Key frame="15" value="85.2526" /><Key frame="25" value="84.8131" /><Key frame="30" value="84.8131" /><Key frame="40" value="84.8131" /><Key frame="45" value="84.8131" /><Key frame="55" value="84.8131" /><Key frame="60" value="84.8131" /><Key frame="70" value="84.8131" /><Key frame="75" value="84.8131" /><Key frame="85" value="84.8131" /><Key frame="90" value="84.8131" /><Key frame="100" value="84.8131" /><Key frame="105" value="84.8131" /><Key frame="115" value="84.8131" /><Key frame="120" value="84.8131" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Wait_R" id="27" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="448" y="178"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="3" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" /></Box><Box name="Speed1" id="1" localization="8" tooltip="" x="589" y="325"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="S1hsnt_1" id="13" localization="8" tooltip="" x="115" y="45"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="116"><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="19" value="-13.1836" /><Key frame="38" value="-13.0078" /><Key frame="40" value="-13.0078" /><Key frame="58" value="-12.5684" /><Key frame="59" value="-12.5684" /><Key frame="71" value="-12.832" /><Key frame="72" value="-12.832" /><Key frame="84" value="-12.5684" /><Key frame="85" value="-12.5684" /><Key frame="97" value="-12.832" /><Key frame="100" value="-12.832" /><Key frame="116" value="-13.9746" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="19" value="7.11915" /><Key frame="38" value="-2.10938" /><Key frame="40" value="-2.10938" /><Key frame="58" value="1.40625" /><Key frame="59" value="1.40625" /><Key frame="71" value="1.58204" /><Key frame="72" value="1.58204" /><Key frame="84" value="1.40625" /><Key frame="85" value="1.40625" /><Key frame="97" value="1.58204" /><Key frame="100" value="1.58204" /><Key frame="116" value="-0.878909" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="19" value="-2.81249" /><Key frame="38" value="-3.42773" /><Key frame="40" value="-3.42773" /><Key frame="58" value="-3.42773" /><Key frame="59" value="-3.42773" /><Key frame="71" value="-3.42773" /><Key frame="72" value="-3.42773" /><Key frame="84" value="-3.42773" /><Key frame="85" value="-3.42773" /><Key frame="97" value="-3.42773" /><Key frame="100" value="-3.42773" /><Key frame="116" value="-4.04297" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="19" value="-0.527345" /><Key frame="38" value="-0.527345" /><Key frame="40" value="-0.527345" /><Key frame="58" value="-0.527345" /><Key frame="59" value="-0.527345" /><Key frame="71" value="-0.527345" /><Key frame="72" value="-0.527345" /><Key frame="84" value="-0.527345" /><Key frame="85" value="-0.527345" /><Key frame="97" value="-0.527345" /><Key frame="100" value="-0.527345" /><Key frame="116" value="-0.527345" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="19" value="-1.49414" /><Key frame="38" value="-2.02149" /><Key frame="40" value="-2.02149" /><Key frame="58" value="-2.02149" /><Key frame="59" value="-2.02149" /><Key frame="71" value="-2.63671" /><Key frame="72" value="-2.63671" /><Key frame="84" value="-2.02149" /><Key frame="85" value="-2.02149" /><Key frame="97" value="-2.63671" /><Key frame="100" value="-2.63671" /><Key frame="116" value="-3.25195" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="19" value="-81.0352" /><Key frame="38" value="-80.332" /><Key frame="40" value="-80.332" /><Key frame="58" value="-79.1895" /><Key frame="59" value="-79.1895" /><Key frame="71" value="-21.8848" /><Key frame="72" value="-21.8848" /><Key frame="84" value="-79.1895" /><Key frame="85" value="-79.1895" /><Key frame="97" value="-21.8848" /><Key frame="100" value="-21.8848" /><Key frame="116" value="-80.2441" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="19" value="-0.0878909" /><Key frame="38" value="0.175782" /><Key frame="40" value="0.175782" /><Key frame="58" value="0.175782" /><Key frame="59" value="0.175782" /><Key frame="71" value="0.175782" /><Key frame="72" value="0.175782" /><Key frame="84" value="0.175782" /><Key frame="85" value="0.175782" /><Key frame="97" value="0.175782" /><Key frame="100" value="0.175782" /><Key frame="116" value="0.175782" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="19" value="0.914763" /><Key frame="38" value="0.903339" /><Key frame="40" value="0.903339" /><Key frame="58" value="0.907733" /><Key frame="59" value="0.907733" /><Key frame="71" value="0.905975" /><Key frame="72" value="0.905975" /><Key frame="84" value="0.907733" /><Key frame="85" value="0.907733" /><Key frame="97" value="0.905975" /><Key frame="100" value="0.905975" /><Key frame="116" value="0.904218" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="19" value="-58.0957" /><Key frame="38" value="-18.7207" /><Key frame="40" value="-18.7207" /><Key frame="58" value="58.6231" /><Key frame="59" value="58.6231" /><Key frame="71" value="59.5899" /><Key frame="72" value="59.5899" /><Key frame="84" value="58.6231" /><Key frame="85" value="58.6231" /><Key frame="97" value="59.5899" /><Key frame="100" value="59.5899" /><Key frame="116" value="-16.2598" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="19" value="52.1191" /><Key frame="38" value="50.625" /><Key frame="40" value="50.625" /><Key frame="58" value="47.4609" /><Key frame="59" value="47.4609" /><Key frame="71" value="16.7871" /><Key frame="72" value="16.7871" /><Key frame="84" value="47.4609" /><Key frame="85" value="47.4609" /><Key frame="97" value="16.7871" /><Key frame="100" value="16.7871" /><Key frame="116" value="50.2734" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="19" value="-88.2457" /><Key frame="38" value="-86.3121" /><Key frame="40" value="-86.3121" /><Key frame="58" value="-86.3121" /><Key frame="59" value="-86.3121" /><Key frame="71" value="-86.3121" /><Key frame="72" value="-86.3121" /><Key frame="84" value="-86.3121" /><Key frame="85" value="-86.3121" /><Key frame="97" value="-86.3121" /><Key frame="100" value="-86.3121" /><Key frame="116" value="-86.3121" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="19" value="82.6172" /><Key frame="38" value="79.541" /><Key frame="40" value="79.541" /><Key frame="58" value="78.9258" /><Key frame="59" value="78.9258" /><Key frame="71" value="21.1816" /><Key frame="72" value="21.1816" /><Key frame="84" value="78.9258" /><Key frame="85" value="78.9258" /><Key frame="97" value="21.1816" /><Key frame="100" value="21.1816" /><Key frame="116" value="79.9805" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="19" value="0.615236" /><Key frame="38" value="0.703127" /><Key frame="40" value="0.703127" /><Key frame="58" value="0.0878909" /><Key frame="59" value="0.0878909" /><Key frame="71" value="0.0878909" /><Key frame="72" value="0.0878909" /><Key frame="84" value="0.0878909" /><Key frame="85" value="0.0878909" /><Key frame="97" value="0.0878909" /><Key frame="100" value="0.0878909" /><Key frame="116" value="0.0878909" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="19" value="0.920914" /><Key frame="38" value="0.891037" /><Key frame="40" value="0.891037" /><Key frame="58" value="0.899824" /><Key frame="59" value="0.899824" /><Key frame="71" value="0.899824" /><Key frame="72" value="0.899824" /><Key frame="84" value="0.899824" /><Key frame="85" value="0.899824" /><Key frame="97" value="0.899824" /><Key frame="100" value="0.899824" /><Key frame="116" value="0.899824" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="19" value="-59.2383" /><Key frame="38" value="-17.1387" /><Key frame="40" value="-17.1387" /><Key frame="58" value="58.2715" /><Key frame="59" value="58.2715" /><Key frame="71" value="60.3809" /><Key frame="72" value="60.3809" /><Key frame="84" value="58.2715" /><Key frame="85" value="58.2715" /><Key frame="97" value="60.3809" /><Key frame="100" value="60.3809" /><Key frame="116" value="-15.2051" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="19" value="-52.4707" /><Key frame="38" value="-49.834" /><Key frame="40" value="-49.834" /><Key frame="58" value="-48.1641" /><Key frame="59" value="-48.1641" /><Key frame="71" value="-16.4356" /><Key frame="72" value="-16.4356" /><Key frame="84" value="-48.1641" /><Key frame="85" value="-48.1641" /><Key frame="97" value="-16.4356" /><Key frame="100" value="-16.4356" /><Key frame="116" value="-50.3613" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="19" value="87.2741" /><Key frame="38" value="85.8678" /><Key frame="40" value="85.8678" /><Key frame="58" value="86.4831" /><Key frame="59" value="86.4831" /><Key frame="71" value="86.4831" /><Key frame="72" value="86.4831" /><Key frame="84" value="86.4831" /><Key frame="85" value="86.4831" /><Key frame="97" value="86.4831" /><Key frame="100" value="86.4831" /><Key frame="116" value="85.8678" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="S1hsnt_2" id="24" localization="8" tooltip="" x="256" y="44"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="116"><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="19" value="-13.1836" /><Key frame="38" value="-13.0078" /><Key frame="40" value="-13.0078" /><Key frame="58" value="-12.5684" /><Key frame="59" value="-12.5684" /><Key frame="71" value="-12.832" /><Key frame="72" value="-12.832" /><Key frame="84" value="-12.5684" /><Key frame="85" value="-12.5684" /><Key frame="97" value="-12.832" /><Key frame="100" value="-12.832" /><Key frame="116" value="-13.9746" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="19" value="7.11915" /><Key frame="38" value="-2.10938" /><Key frame="40" value="-2.10938" /><Key frame="58" value="1.40625" /><Key frame="59" value="1.40625" /><Key frame="71" value="1.58204" /><Key frame="72" value="1.58204" /><Key frame="84" value="1.40625" /><Key frame="85" value="1.40625" /><Key frame="97" value="1.58204" /><Key frame="100" value="1.58204" /><Key frame="116" value="-0.878909" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="19" value="-2.81249" /><Key frame="38" value="-3.42773" /><Key frame="40" value="-3.42773" /><Key frame="58" value="-3.42773" /><Key frame="59" value="-3.42773" /><Key frame="71" value="-3.42773" /><Key frame="72" value="-3.42773" /><Key frame="84" value="-3.42773" /><Key frame="85" value="-3.42773" /><Key frame="97" value="-3.42773" /><Key frame="100" value="-3.42773" /><Key frame="116" value="-4.04297" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="19" value="-0.527345" /><Key frame="38" value="-0.527345" /><Key frame="40" value="-0.527345" /><Key frame="58" value="-0.527345" /><Key frame="59" value="-0.527345" /><Key frame="71" value="-0.527345" /><Key frame="72" value="-0.527345" /><Key frame="84" value="-0.527345" /><Key frame="85" value="-0.527345" /><Key frame="97" value="-0.527345" /><Key frame="100" value="-0.527345" /><Key frame="116" value="-0.527345" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="19" value="-1.49414" /><Key frame="38" value="-2.02149" /><Key frame="40" value="-2.02149" /><Key frame="58" value="-2.02149" /><Key frame="59" value="-2.02149" /><Key frame="71" value="-2.63671" /><Key frame="72" value="-2.63671" /><Key frame="84" value="-2.02149" /><Key frame="85" value="-2.02149" /><Key frame="97" value="-2.63671" /><Key frame="100" value="-2.63671" /><Key frame="116" value="-3.25195" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="19" value="-81.0352" /><Key frame="38" value="-80.332" /><Key frame="40" value="-80.332" /><Key frame="58" value="-79.1895" /><Key frame="59" value="-79.1895" /><Key frame="71" value="-21.8848" /><Key frame="72" value="-21.8848" /><Key frame="84" value="-79.1895" /><Key frame="85" value="-79.1895" /><Key frame="97" value="-21.8848" /><Key frame="100" value="-21.8848" /><Key frame="116" value="-80.2441" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="19" value="-0.0878909" /><Key frame="38" value="0.175782" /><Key frame="40" value="0.175782" /><Key frame="58" value="0.175782" /><Key frame="59" value="0.175782" /><Key frame="71" value="0.175782" /><Key frame="72" value="0.175782" /><Key frame="84" value="0.175782" /><Key frame="85" value="0.175782" /><Key frame="97" value="0.175782" /><Key frame="100" value="0.175782" /><Key frame="116" value="0.175782" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="19" value="0.914763" /><Key frame="38" value="0.903339" /><Key frame="40" value="0.903339" /><Key frame="58" value="0.907733" /><Key frame="59" value="0.907733" /><Key frame="71" value="0.905975" /><Key frame="72" value="0.905975" /><Key frame="84" value="0.907733" /><Key frame="85" value="0.907733" /><Key frame="97" value="0.905975" /><Key frame="100" value="0.905975" /><Key frame="116" value="0.904218" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="19" value="-58.0957" /><Key frame="38" value="-18.7207" /><Key frame="40" value="-18.7207" /><Key frame="58" value="58.6231" /><Key frame="59" value="58.6231" /><Key frame="71" value="59.5899" /><Key frame="72" value="59.5899" /><Key frame="84" value="58.6231" /><Key frame="85" value="58.6231" /><Key frame="97" value="59.5899" /><Key frame="100" value="59.5899" /><Key frame="116" value="-16.2598" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="19" value="52.1191" /><Key frame="38" value="50.625" /><Key frame="40" value="50.625" /><Key frame="58" value="47.4609" /><Key frame="59" value="47.4609" /><Key frame="71" value="16.7871" /><Key frame="72" value="16.7871" /><Key frame="84" value="47.4609" /><Key frame="85" value="47.4609" /><Key frame="97" value="16.7871" /><Key frame="100" value="16.7871" /><Key frame="116" value="50.2734" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="19" value="-88.2457" /><Key frame="38" value="-86.3121" /><Key frame="40" value="-86.3121" /><Key frame="58" value="-86.3121" /><Key frame="59" value="-86.3121" /><Key frame="71" value="-86.3121" /><Key frame="72" value="-86.3121" /><Key frame="84" value="-86.3121" /><Key frame="85" value="-86.3121" /><Key frame="97" value="-86.3121" /><Key frame="100" value="-86.3121" /><Key frame="116" value="-86.3121" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="19" value="82.6172" /><Key frame="38" value="79.541" /><Key frame="40" value="79.541" /><Key frame="58" value="78.9258" /><Key frame="59" value="78.9258" /><Key frame="71" value="21.1816" /><Key frame="72" value="21.1816" /><Key frame="84" value="78.9258" /><Key frame="85" value="78.9258" /><Key frame="97" value="21.1816" /><Key frame="100" value="21.1816" /><Key frame="116" value="79.9805" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="19" value="0.615236" /><Key frame="38" value="0.703127" /><Key frame="40" value="0.703127" /><Key frame="58" value="0.0878909" /><Key frame="59" value="0.0878909" /><Key frame="71" value="0.0878909" /><Key frame="72" value="0.0878909" /><Key frame="84" value="0.0878909" /><Key frame="85" value="0.0878909" /><Key frame="97" value="0.0878909" /><Key frame="100" value="0.0878909" /><Key frame="116" value="0.0878909" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="19" value="0.920914" /><Key frame="38" value="0.891037" /><Key frame="40" value="0.891037" /><Key frame="58" value="0.899824" /><Key frame="59" value="0.899824" /><Key frame="71" value="0.899824" /><Key frame="72" value="0.899824" /><Key frame="84" value="0.899824" /><Key frame="85" value="0.899824" /><Key frame="97" value="0.899824" /><Key frame="100" value="0.899824" /><Key frame="116" value="0.899824" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="19" value="-59.2383" /><Key frame="38" value="-17.1387" /><Key frame="40" value="-17.1387" /><Key frame="58" value="58.2715" /><Key frame="59" value="58.2715" /><Key frame="71" value="60.3809" /><Key frame="72" value="60.3809" /><Key frame="84" value="58.2715" /><Key frame="85" value="58.2715" /><Key frame="97" value="60.3809" /><Key frame="100" value="60.3809" /><Key frame="116" value="-15.2051" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="19" value="-52.4707" /><Key frame="38" value="-49.834" /><Key frame="40" value="-49.834" /><Key frame="58" value="-48.1641" /><Key frame="59" value="-48.1641" /><Key frame="71" value="-16.4356" /><Key frame="72" value="-16.4356" /><Key frame="84" value="-48.1641" /><Key frame="85" value="-48.1641" /><Key frame="97" value="-16.4356" /><Key frame="100" value="-16.4356" /><Key frame="116" value="-50.3613" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="19" value="87.2741" /><Key frame="38" value="85.8678" /><Key frame="40" value="85.8678" /><Key frame="58" value="86.4831" /><Key frame="59" value="86.4831" /><Key frame="71" value="86.4831" /><Key frame="72" value="86.4831" /><Key frame="84" value="86.4831" /><Key frame="85" value="86.4831" /><Key frame="97" value="86.4831" /><Key frame="100" value="86.4831" /><Key frame="116" value="85.8678" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="S1eemn_3" id="25" localization="8" tooltip="" x="395" y="52"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="120"><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="20" value="-12.7441" /><Key frame="32" value="-12.7441" /><Key frame="45" value="-13.0078" /><Key frame="57" value="-13.0078" /><Key frame="70" value="-13.0078" /><Key frame="83" value="-13.0078" /><Key frame="96" value="-13.0078" /><Key frame="108" value="-13.0078" /><Key frame="120" value="-11.3379" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="20" value="-4.6582" /><Key frame="32" value="-4.6582" /><Key frame="45" value="-5.27344" /><Key frame="57" value="-5.27344" /><Key frame="70" value="-4.30664" /><Key frame="83" value="-4.30664" /><Key frame="96" value="-4.30664" /><Key frame="108" value="-4.30664" /><Key frame="120" value="-4.83398" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="20" value="-4.30664" /><Key frame="32" value="-4.30664" /><Key frame="45" value="-4.30664" /><Key frame="57" value="-4.30664" /><Key frame="70" value="-4.30664" /><Key frame="83" value="-4.30664" /><Key frame="96" value="-4.30664" /><Key frame="108" value="-4.30664" /><Key frame="120" value="-4.30664" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="20" value="-0.527345" /><Key frame="32" value="-0.527345" /><Key frame="45" value="-0.615236" /><Key frame="57" value="-0.615236" /><Key frame="70" value="-0.615236" /><Key frame="83" value="-0.615236" /><Key frame="96" value="-0.615236" /><Key frame="108" value="-0.615236" /><Key frame="120" value="-0.615236" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="20" value="-3.07617" /><Key frame="32" value="-3.07617" /><Key frame="45" value="-3.16406" /><Key frame="57" value="-3.16406" /><Key frame="70" value="-3.16406" /><Key frame="83" value="-3.16406" /><Key frame="96" value="-3.16406" /><Key frame="108" value="-3.16406" /><Key frame="120" value="-3.16406" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="20" value="-80.5078" /><Key frame="32" value="-80.5078" /><Key frame="45" value="-80.2441" /><Key frame="57" value="-80.2441" /><Key frame="70" value="-80.2441" /><Key frame="83" value="-80.2441" /><Key frame="96" value="-80.2441" /><Key frame="108" value="-80.2441" /><Key frame="120" value="-79.9805" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="20" value="-0.175782" /><Key frame="32" value="-0.175782" /><Key frame="45" value="0.0878909" /><Key frame="57" value="0.0878909" /><Key frame="70" value="0.0878909" /><Key frame="83" value="0.0878909" /><Key frame="96" value="0.0878909" /><Key frame="108" value="0.0878909" /><Key frame="120" value="-0.351564" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="20" value="0.90949" /><Key frame="32" value="0.90949" /><Key frame="45" value="0.514938" /><Key frame="57" value="0.514938" /><Key frame="70" value="0.0615114" /><Key frame="83" value="0.0615114" /><Key frame="96" value="0.461336" /><Key frame="108" value="0.461336" /><Key frame="120" value="0.904218" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="20" value="-62.1387" /><Key frame="32" value="-62.1387" /><Key frame="45" value="-60.0293" /><Key frame="57" value="-60.0293" /><Key frame="70" value="-60.0293" /><Key frame="83" value="-60.0293" /><Key frame="96" value="-60.0293" /><Key frame="108" value="-60.0293" /><Key frame="120" value="-18.5449" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="20" value="39.9902" /><Key frame="32" value="39.9902" /><Key frame="45" value="40.5176" /><Key frame="57" value="40.5176" /><Key frame="70" value="40.5176" /><Key frame="83" value="40.5176" /><Key frame="96" value="40.5176" /><Key frame="108" value="40.5176" /><Key frame="120" value="48.1641" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="20" value="-88.2457" /><Key frame="32" value="-88.2457" /><Key frame="45" value="-87.0152" /><Key frame="57" value="-87.0152" /><Key frame="70" value="-87.0152" /><Key frame="83" value="-87.0152" /><Key frame="96" value="-87.0152" /><Key frame="108" value="-87.0152" /><Key frame="120" value="-86.3121" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="20" value="80.332" /><Key frame="32" value="80.332" /><Key frame="45" value="80.2441" /><Key frame="57" value="80.2441" /><Key frame="70" value="80.2441" /><Key frame="83" value="80.2441" /><Key frame="96" value="80.2441" /><Key frame="108" value="80.2441" /><Key frame="120" value="79.6289" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="20" value="0.351564" /><Key frame="32" value="0.351564" /><Key frame="45" value="0.351564" /><Key frame="57" value="0.351564" /><Key frame="70" value="0.351564" /><Key frame="83" value="0.351564" /><Key frame="96" value="0.351564" /><Key frame="108" value="0.351564" /><Key frame="120" value="0.351564" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="20" value="0.889279" /><Key frame="32" value="0.889279" /><Key frame="45" value="0.513181" /><Key frame="57" value="0.513181" /><Key frame="70" value="0.0588752" /><Key frame="83" value="0.0588752" /><Key frame="96" value="0.456942" /><Key frame="108" value="0.456942" /><Key frame="120" value="0.886643" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="20" value="-60.4688" /><Key frame="32" value="-60.4688" /><Key frame="45" value="-61.084" /><Key frame="57" value="-61.084" /><Key frame="70" value="-61.084" /><Key frame="83" value="-61.084" /><Key frame="96" value="-60.3809" /><Key frame="108" value="-60.3809" /><Key frame="120" value="-17.5781" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="20" value="-40.3418" /><Key frame="32" value="-40.3418" /><Key frame="45" value="-40.7813" /><Key frame="57" value="-40.7813" /><Key frame="70" value="-40.7813" /><Key frame="83" value="-40.7813" /><Key frame="96" value="-40.7813" /><Key frame="108" value="-40.7813" /><Key frame="120" value="-47.9883" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="20" value="87.0983" /><Key frame="32" value="87.0983" /><Key frame="45" value="85.6041" /><Key frame="57" value="85.6041" /><Key frame="70" value="85.6041" /><Key frame="83" value="85.6041" /><Key frame="96" value="85.6041" /><Key frame="108" value="85.6041" /><Key frame="120" value="84.9889" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="S1hsnt_4" id="26" localization="8" tooltip="" x="532" y="50"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="116"><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="19" value="-13.1836" /><Key frame="38" value="-13.0078" /><Key frame="40" value="-13.0078" /><Key frame="58" value="-12.5684" /><Key frame="59" value="-12.5684" /><Key frame="71" value="-12.832" /><Key frame="72" value="-12.832" /><Key frame="84" value="-12.5684" /><Key frame="85" value="-12.5684" /><Key frame="97" value="-12.832" /><Key frame="100" value="-12.832" /><Key frame="116" value="-13.9746" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="19" value="7.11915" /><Key frame="38" value="-2.10938" /><Key frame="40" value="-2.10938" /><Key frame="58" value="1.40625" /><Key frame="59" value="1.40625" /><Key frame="71" value="1.58204" /><Key frame="72" value="1.58204" /><Key frame="84" value="1.40625" /><Key frame="85" value="1.40625" /><Key frame="97" value="1.58204" /><Key frame="100" value="1.58204" /><Key frame="116" value="-0.878909" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="19" value="-2.81249" /><Key frame="38" value="-3.42773" /><Key frame="40" value="-3.42773" /><Key frame="58" value="-3.42773" /><Key frame="59" value="-3.42773" /><Key frame="71" value="-3.42773" /><Key frame="72" value="-3.42773" /><Key frame="84" value="-3.42773" /><Key frame="85" value="-3.42773" /><Key frame="97" value="-3.42773" /><Key frame="100" value="-3.42773" /><Key frame="116" value="-4.04297" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="19" value="-0.527345" /><Key frame="38" value="-0.527345" /><Key frame="40" value="-0.527345" /><Key frame="58" value="-0.527345" /><Key frame="59" value="-0.527345" /><Key frame="71" value="-0.527345" /><Key frame="72" value="-0.527345" /><Key frame="84" value="-0.527345" /><Key frame="85" value="-0.527345" /><Key frame="97" value="-0.527345" /><Key frame="100" value="-0.527345" /><Key frame="116" value="-0.527345" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="19" value="-1.49414" /><Key frame="38" value="-2.02149" /><Key frame="40" value="-2.02149" /><Key frame="58" value="-2.02149" /><Key frame="59" value="-2.02149" /><Key frame="71" value="-2.63671" /><Key frame="72" value="-2.63671" /><Key frame="84" value="-2.02149" /><Key frame="85" value="-2.02149" /><Key frame="97" value="-2.63671" /><Key frame="100" value="-2.63671" /><Key frame="116" value="-3.25195" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="19" value="-81.0352" /><Key frame="38" value="-80.332" /><Key frame="40" value="-80.332" /><Key frame="58" value="-79.1895" /><Key frame="59" value="-79.1895" /><Key frame="71" value="-21.8848" /><Key frame="72" value="-21.8848" /><Key frame="84" value="-79.1895" /><Key frame="85" value="-79.1895" /><Key frame="97" value="-21.8848" /><Key frame="100" value="-21.8848" /><Key frame="116" value="-80.2441" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="19" value="-0.0878909" /><Key frame="38" value="0.175782" /><Key frame="40" value="0.175782" /><Key frame="58" value="0.175782" /><Key frame="59" value="0.175782" /><Key frame="71" value="0.175782" /><Key frame="72" value="0.175782" /><Key frame="84" value="0.175782" /><Key frame="85" value="0.175782" /><Key frame="97" value="0.175782" /><Key frame="100" value="0.175782" /><Key frame="116" value="0.175782" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="19" value="0.914763" /><Key frame="38" value="0.903339" /><Key frame="40" value="0.903339" /><Key frame="58" value="0.907733" /><Key frame="59" value="0.907733" /><Key frame="71" value="0.905975" /><Key frame="72" value="0.905975" /><Key frame="84" value="0.907733" /><Key frame="85" value="0.907733" /><Key frame="97" value="0.905975" /><Key frame="100" value="0.905975" /><Key frame="116" value="0.904218" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="19" value="-58.0957" /><Key frame="38" value="-18.7207" /><Key frame="40" value="-18.7207" /><Key frame="58" value="58.6231" /><Key frame="59" value="58.6231" /><Key frame="71" value="59.5899" /><Key frame="72" value="59.5899" /><Key frame="84" value="58.6231" /><Key frame="85" value="58.6231" /><Key frame="97" value="59.5899" /><Key frame="100" value="59.5899" /><Key frame="116" value="-16.2598" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="19" value="52.1191" /><Key frame="38" value="50.625" /><Key frame="40" value="50.625" /><Key frame="58" value="47.4609" /><Key frame="59" value="47.4609" /><Key frame="71" value="16.7871" /><Key frame="72" value="16.7871" /><Key frame="84" value="47.4609" /><Key frame="85" value="47.4609" /><Key frame="97" value="16.7871" /><Key frame="100" value="16.7871" /><Key frame="116" value="50.2734" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="19" value="-88.2457" /><Key frame="38" value="-86.3121" /><Key frame="40" value="-86.3121" /><Key frame="58" value="-86.3121" /><Key frame="59" value="-86.3121" /><Key frame="71" value="-86.3121" /><Key frame="72" value="-86.3121" /><Key frame="84" value="-86.3121" /><Key frame="85" value="-86.3121" /><Key frame="97" value="-86.3121" /><Key frame="100" value="-86.3121" /><Key frame="116" value="-86.3121" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="19" value="82.6172" /><Key frame="38" value="79.541" /><Key frame="40" value="79.541" /><Key frame="58" value="78.9258" /><Key frame="59" value="78.9258" /><Key frame="71" value="21.1816" /><Key frame="72" value="21.1816" /><Key frame="84" value="78.9258" /><Key frame="85" value="78.9258" /><Key frame="97" value="21.1816" /><Key frame="100" value="21.1816" /><Key frame="116" value="79.9805" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="19" value="0.615236" /><Key frame="38" value="0.703127" /><Key frame="40" value="0.703127" /><Key frame="58" value="0.0878909" /><Key frame="59" value="0.0878909" /><Key frame="71" value="0.0878909" /><Key frame="72" value="0.0878909" /><Key frame="84" value="0.0878909" /><Key frame="85" value="0.0878909" /><Key frame="97" value="0.0878909" /><Key frame="100" value="0.0878909" /><Key frame="116" value="0.0878909" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="19" value="0.920914" /><Key frame="38" value="0.891037" /><Key frame="40" value="0.891037" /><Key frame="58" value="0.899824" /><Key frame="59" value="0.899824" /><Key frame="71" value="0.899824" /><Key frame="72" value="0.899824" /><Key frame="84" value="0.899824" /><Key frame="85" value="0.899824" /><Key frame="97" value="0.899824" /><Key frame="100" value="0.899824" /><Key frame="116" value="0.899824" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="19" value="-59.2383" /><Key frame="38" value="-17.1387" /><Key frame="40" value="-17.1387" /><Key frame="58" value="58.2715" /><Key frame="59" value="58.2715" /><Key frame="71" value="60.3809" /><Key frame="72" value="60.3809" /><Key frame="84" value="58.2715" /><Key frame="85" value="58.2715" /><Key frame="97" value="60.3809" /><Key frame="100" value="60.3809" /><Key frame="116" value="-15.2051" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="19" value="-52.4707" /><Key frame="38" value="-49.834" /><Key frame="40" value="-49.834" /><Key frame="58" value="-48.1641" /><Key frame="59" value="-48.1641" /><Key frame="71" value="-16.4356" /><Key frame="72" value="-16.4356" /><Key frame="84" value="-48.1641" /><Key frame="85" value="-48.1641" /><Key frame="97" value="-16.4356" /><Key frame="100" value="-16.4356" /><Key frame="116" value="-50.3613" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="19" value="87.2741" /><Key frame="38" value="85.8678" /><Key frame="40" value="85.8678" /><Key frame="58" value="86.4831" /><Key frame="59" value="86.4831" /><Key frame="71" value="86.4831" /><Key frame="72" value="86.4831" /><Key frame="84" value="86.4831" /><Key frame="85" value="86.4831" /><Key frame="97" value="86.4831" /><Key frame="100" value="86.4831" /><Key frame="116" value="85.8678" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="387" y="390"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.7" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" /></Box><Link inputowner="24" indexofinput="2" outputowner="13" indexofoutput="4" /><Link inputowner="25" indexofinput="2" outputowner="24" indexofoutput="4" /><Link inputowner="26" indexofinput="2" outputowner="25" indexofoutput="4" /><Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="6" indexofinput="2" outputowner="26" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Stand Up" id="8" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="84" y="242"><bitmap>media/images/box/movement/stand.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" /><Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" /><Timeline enable="0"><BehaviorLayer name="StandUpBehavior"><BehaviorKeyframe name="DetectRobotPose" index="1"><Diagram><Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" /><Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6"><Choice value="Crouch" /><Choice value="LyingBack" /><Choice value="LyingBelly" /><Choice value="Sit" /><Choice value="SitRelax" /><Choice value="StandInit" /><Choice value="Stand" /><Choice value="StandZero" /></Parameter><Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" /><Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" /><Resource name="All motors" type="Lock" timeout="0" /><Resource name="Stiffness" type="Lock" timeout="0" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="All motors" type="Lock" timeout="0" /></Box><Box name="Stand Up (1)" id="2" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="496" y="34"><bitmap>media/images/box/movement/stand.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" /><Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" /><Timeline enable="0"><BehaviorLayer name="StandUpBehavior"><BehaviorKeyframe name="DetectRobotPose" index="1"><Diagram><Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" /><Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6"><Choice value="Crouch" /><Choice value="LyingBack" /><Choice value="LyingBelly" /><Choice value="Sit" /><Choice value="SitRelax" /><Choice value="StandInit" /><Choice value="Stand" /><Choice value="StandZero" /></Parameter><Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" /><Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" /><Resource name="All motors" type="Lock" timeout="0" /><Resource name="Stiffness" type="Lock" timeout="0" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="All motors" type="Lock" timeout="0" /></Box><Link inputowner="18" indexofinput="2" outputowner="27" indexofoutput="4" /><Link inputowner="27" indexofinput="2" outputowner="12" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="14" indexofoutput="4" /><Link inputowner="18" indexofinput="3" outputowner="14" indexofoutput="4" /><Link inputowner="14" indexofinput="2" outputowner="8" indexofoutput="4" /><Link inputowner="12" indexofinput="2" outputowner="8" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="8" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="8" indexofoutput="5" /><Link inputowner="12" indexofinput="2" outputowner="8" indexofoutput="5" /><Link inputowner="14" indexofinput="2" outputowner="8" indexofoutput="5" /><Link inputowner="5" indexofinput="4" outputowner="1" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="5" /><Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="7" indexofinput="2" outputowner="8" indexofoutput="3" /><Link inputowner="13" indexofinput="2" outputowner="7" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="16" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="3" /><Link inputowner="11" indexofinput="2" outputowner="2" indexofoutput="3" /><Link inputowner="9" indexofinput="3" outputowner="4" indexofoutput="4" /><Link inputowner="9" indexofinput="2" outputowner="11" indexofoutput="4" /><Link inputowner="10" indexofinput="2" outputowner="3" indexofoutput="3" /><Link inputowner="16" indexofinput="2" outputowner="10" indexofoutput="4" /><Link inputowner="4" indexofinput="3" outputowner="11" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="6" indexofoutput="4" /><Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="4" /><Link inputowner="12" indexofinput="2" outputowner="13" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="12" indexofoutput="4" /><Link inputowner="12" indexofinput="2" outputowner="13" indexofoutput="5" /><Link inputowner="0" indexofinput="4" outputowner="16" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Stand (2)" id="8" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="277" y="406"><bitmap>media/images/positions/Stand.png</bitmap><script language="4"><content><![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureProxy = None
        try:
            self.postureProxy = ALProxy("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureProxy != None):
            self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.postureProxy != None):
            result = self.postureProxy.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" /><Resource name="All motors" type="Lock" timeout="0" /><Resource name="Stiffness" type="Lock" timeout="0" /></Box><Box name="Wait (2)" id="9" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="566" y="410"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" /></Box><Box name="Magic trick invitation" id="11" localization="8" tooltip="" x="419" y="562"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Animated Say Text" id="7" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="322" y="5"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALAnimatedSpeech')
        self.ttsStop = ALProxy('ALAnimatedSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="random" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Box name="Text Edit" id="8" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="65" y="10"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Or maybe would you like to see a magic trick?")]]></content></script><pluginContent><text><![CDATA[Or maybe would you like to see a magic trick?]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="Stand" id="5" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="487" y="71"><bitmap>media/images/positions/Stand.png</bitmap><script language="4"><content><![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureProxy = None
        try:
            self.postureProxy = ALProxy("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureProxy != None):
            self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.postureProxy != None):
            result = self.postureProxy.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" /><Resource name="All motors" type="Lock" timeout="0" /><Resource name="Stiffness" type="Lock" timeout="0" /></Box><Box name="Animated Say Text (1)" id="1" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="363" y="145"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALAnimatedSpeech')
        self.ttsStop = ALProxy('ALAnimatedSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="random" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Box name="Text Edit (1)" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="106" y="150"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("I need a volunteer!")]]></content></script><pluginContent><text><![CDATA[I need a volunteer!]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="7" indexofinput="2" outputowner="8" indexofoutput="3" /><Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="5" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" /><Link inputowner="2" indexofinput="2" outputowner="7" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Stand (3)" id="12" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="282" y="561"><bitmap>media/images/positions/Stand.png</bitmap><script language="4"><content><![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureProxy = None
        try:
            self.postureProxy = ALProxy("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureProxy != None):
            self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.postureProxy != None):
            result = self.postureProxy.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" /><Resource name="All motors" type="Lock" timeout="0" /><Resource name="Stiffness" type="Lock" timeout="0" /></Box><Box name="Wait (3)" id="13" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="571" y="565"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" /></Box><Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="7" indexofinput="2" outputowner="10" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="4" /><Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="8" indexofoutput="4" /><Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="4" /><Link inputowner="11" indexofinput="2" outputowner="12" indexofoutput="4" /><Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="4" /><Link inputowner="8" indexofinput="2" outputowner="4" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="7" indexofoutput="4" /><Link inputowner="12" indexofinput="2" outputowner="9" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="8" indexofoutput="5" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="5" /><Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="5" /><Link inputowner="11" indexofinput="2" outputowner="12" indexofoutput="5" /><Link inputowner="0" indexofinput="4" outputowner="13" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="9" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>