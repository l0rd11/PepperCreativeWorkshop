<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Play Sound" id="3" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="166" y="41"><bitmap>media/images/box/interaction/play_music.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" /><Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../html/macarena.wav" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" /><Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" /><Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" /><Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" /><Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70"><bitmap>media/images/box/interaction/play_music.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.player = ALProxy('ALAudioPlayer')
        self.playerStop = ALProxy('ALAudioPlayer', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.post.playFileInLoop(p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.post.playFileFromPosition(p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" /><Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" /><Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" /><Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" /></Box><Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71"><bitmap>media/images/box/folder.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" /><Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" /></Box><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="Audio player" type="Lock" timeout="0" /></Box><Box name="Macarena" id="4" localization="8" tooltip="This box contains a macarena dance moves.&#x0A;&#x0A;To edit its script, double-click on it." x="162" y="356"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.repeats = self.getParameter("Repeat")
        self.motion = ALProxy("ALMotion")
        self.beats = [1.2811, 1.86183, 2.44272, 3.02624, 3.60707, 4.18996, 4.77286, 5.35734, 5.93869, 6.51952, 7.10192, 7.68537, 8.26621, 8.84652, 9.42891, 10.01182, 10.59315, 11.17186, 11.74952, 12.32821, 12.90637, 13.48296, 14.06217, 14.64295, 15.2253, 15.80767, 16.39161, 16.97662, 17.56059, 18.14302, 18.72651, 19.31001, 19.89498, 20.47922, 21.06273, 21.6455, 22.23015, 22.81615, 23.40142]
        self.moves = [23.98605, 24.57016, 25.1548, 25.74047, 26.32353, 26.90502, 27.48911, 28.07216, 28.65572, 29.23928, 29.82232, 30.40431, 30.98422, 31.56465, 32.14873, 32.73074, 33.31171, 33.89321, 34.47471, 35.05728, 35.63671, 36.21355, 36.79353, 37.37352, 37.95458, 38.53775, 39.11993, 39.70266, 40.28439, 40.86778, 41.45124, 42.03477, 42.61734, 43.2005, 43.78373, 44.36806, 44.95033, 45.53419, 46.11702, 46.69933, 47.28269, 47.86763, 48.45309, 49.03645, 49.6172, 50.20159, 50.78649, 51.37137, 51.95411, 52.53576, 53.11736, 53.70255, 54.28558, 54.86748, 55.44929, 56.03206, 56.61579, 57.20049, 57.78144, 58.36076, 58.9395, 59.51975, 60.10203, 60.68322, 61.2633, 61.84487, 62.42846, 63.01355, 63.59545, 64.17626, 64.75859, 65.34245, 65.92632, 66.5081, 67.08936, 67.67165, 68.25344, 68.83682, 69.42076, 70.00526, 70.5898, 71.17542, 71.76162, 72.3468, 72.92941, 73.51099, 74.09418, 74.67634, 75.258, 75.84021, 76.4214, 77.00208, 77.58069, 78.16088, 78.74212, 79.32494, 79.90673, 80.49063, 81.07504, 81.66155, 82.24388, 82.82725, 83.4101, 83.99346, 84.5763, 85.15913, 85.74092, 86.32374, 86.90448, 87.48783, 88.07273, 88.65763, 89.24148, 89.82583, 90.41017, 90.99605, 91.5793, 92.16045, 92.74314, 93.32687, 93.91058, 94.49325, 95.07537, 95.65434, 96.23276, 96.81219, 97.39365, 97.97559, 98.55747, 99.13982, 99.72471, 100.30955, 100.89174, 101.47388, 102.0565, 102.63909, 103.22164, 103.8052, 104.38875, 104.9728, 105.55318, 106.1346, 106.71861, 107.30211, 107.883, 108.46443, 109.04481, 109.62625, 110.20562, 110.78293, 111.36183, 111.94179, 112.52231, 113.10496, 113.68714, 114.26989, 114.85113, 115.43452, 116.01747, 116.60049, 117.18411, 117.76886, 118.35211, 118.93752, 119.51986, 120.10329, 120.68626, 121.26876, 121.85181, 122.43594, 123.02009, 123.60321, 124.18425, 124.76999, 125.35364, 125.93782, 126.52148, 127.10461, 127.68722, 128.27087, 128.85295, 129.435, 130.016, 130.59854, 131.18158, 131.7646, 132.3476, 132.92691, 133.50516, 134.086, 134.66787, 135.24816, 135.82948, 136.41132, 136.99574, 137.58118, 138.16399, 138.74521, 139.32746, 139.91075, 140.49406, 141.07582, 141.65761, 142.23839, 142.81921, 143.40269, 143.98726, 144.57135, 145.15549, 145.7402, 146.32703, 146.91339, 147.49664, 148.07888, 148.66221, 149.24504, 149.82792, 150.40978, 150.99063, 151.57151, 152.1498, 152.73074, 153.31172, 153.89273, 154.47379, 155.05644, 155.63914, 156.22343, 156.80512, 157.38891, 157.97217, 158.5549, 159.13868, 159.72349, 160.30776, 160.89098, 161.47157, 162.05529, 162.64004, 163.22426, 163.8069, 164.38953, 164.97214, 165.55683, 166.13994, 166.72306, 167.30358, 167.88621, 168.46992, 169.05419, 169.63482, 170.21337, 170.79036, 171.37207, 171.95483, 172.53706, 173.11878, 173.70312, 174.28905, 174.87498, 175.45779, 176.04011, 176.62296, 177.20532, 177.78768, 178.37057, 178.95398, 179.53739, 180.11607, 180.69789, 181.28179, 181.86414, 182.4444, 183.02519, 183.60549, 184.1884, 184.76661, 185.34482, 185.92512, 186.50595, 187.08728, 187.66965, 188.25253, 188.83538, 189.41663, 190.001, 190.58744, 191.1723, 191.75609, 192.33989, 192.92524, 193.51164, 194.09437, 194.67554, 195.25933, 195.8426, 196.42587, 197.0081, 197.58982, 198.1684, 198.74646, 199.32504, 199.90728, 200.48953, 201.07176, 201.65452, 202.24041, 202.82577, 203.40905, 203.99127, 204.57402, 205.15625, 205.739, 206.32175, 206.90449, 207.48669, 208.06628, 208.64795, 209.23171, 209.81442, 210.39505, 210.97674, 211.55845, 212.14071, 212.71933, 213.29745, 213.87663, 214.45688, 215.0382, 215.62058, 216.20246, 216.7854, 217.3673, 217.9508, 218.53643, 219.12, 219.70308, 220.28673, 220.87199, 221.45729, 222.03949, 222.62069, 223.20298, 223.78582, 224.36923, 224.95058, 225.53143, 226.11387, 226.69475, 227.27774, 227.86283, 228.44688, 229.03146, 229.6171, 230.20221, 230.78839, 231.37194, 231.95392, 232.53746, 233.12047, 233.70346, 234.28591, 234.86624, 235.44708, 236.0258, 236.60713, 237.19105, 237.77497, 238.35889, 238.94438, 239.5304, 240.11747, 240.70038, 241.28279, 241.86575, 242.44927, 243.03386, 243.61847, 244.20626, 244.80401, 245.39517, 245.99361, 246.62458]

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        names = list()
        keys = list()
        times = list()
        times_head = list()

        keys_head = list()
        keys_dict = dict()
        times_dict = dict()

        for i in range(len(self.beats)):
            beat = self.beats[i]
            if (i == 0):
                times_head.append(beat/2)
            else:
                times_head.append((beat + self.beats[i-1])/2)
            times_head.append(beat)
            keys_head.extend([0, 0.35])

        keys_dict["HeadPitch"] = keys_head
        times_dict["HeadPitch"] = times_head

        stand_values = self.stand_pose()

        for m in stand_values.keys():
            if m not in keys_dict:
                keys_dict[m] = list()
                times_dict[m] = list()
            keys_dict[m].extend(stand_values[m][0])
            times_dict[m].extend(stand_values[m][1])

        for n in range(self.repeats):
            move_values = self.macarena_move(self.moves[n*16:(n+1)*16])

            for m in move_values.keys():
                if m not in keys_dict:
                    keys_dict[m] = list()
                    times_dict[m] = list()
                keys_dict[m].extend(move_values[m][0])
                times_dict[m].extend(move_values[m][1])

        for m in keys_dict.keys():
            names.append(m)
            keys.append(keys_dict[m])
            times.append(times_dict[m])

        self.motion.angleInterpolation(names, keys, times, True)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stand_pose(self):
        names = list()
        times = list()
        keys = list()

        names.append("HeadYaw")
        times.append([0.4, 2, 4, 8, 12, 16, 20, 23.40142])
        keys.append([0.00885517, 0.00885517, 0.00885517, 0.00885517, 0.00885517, 0.00885517, 0.00885517, 0.00885517])

        names.append("HipPitch")
        times.append([0.4, 2, 4, 8, 12, 16, 20, 23.40142])
        keys.append([-0.032879, -0.032879, -0.032879, -0.032879, -0.032879, -0.032879, -0.032879, -0.032879])

        names.append("HipRoll")
        times.append([0.4, 2, 4, 8, 12, 16, 20, 23.40142])
        keys.append([-0.00158357, -0.00158357, -0.00158357, -0.00158357, -0.00158357, -0.00158357, -0.00158357, -0.00158357])

        names.append("KneePitch")
        times.append([0.4, 2, 4, 8, 12, 16, 20, 23.40142])
        keys.append([-0.00105403, -0.00105403, -0.00105403, -0.00105403, -0.00105403, -0.00105403, -0.00105403, -0.00105403])

        names.append("LElbowRoll")
        times.append([0.4, 2, 4, 8, 12, 16, 20, 23.40142])
        keys.append([-0.519025, -0.519025, -0.519025, -0.519025, -0.519025, -0.519025, -0.519025, -0.519025])

        names.append("LElbowYaw")
        times.append([0.4, 2, 4, 8, 12, 16, 20, 23.40142])
        keys.append([-1.22932, -1.22932, -1.22932, -1.22932, -1.22932, -1.22932, -1.22932, -1.22932])

        names.append("LHand")
        times.append([0.4, 2, 4, 8, 12, 16, 20, 23.40142])
        keys.append([0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9])

        names.append("LShoulderPitch")
        times.append([0.4, 2, 4, 8, 12, 16, 20, 23.40142])
        keys.append([1.5708, 1.5708, 1.5708, 1.5708, 1.5708, 1.5708, 1.5708, 1.5708])

        names.append("LShoulderRoll")
        times.append([0.4, 2, 4, 8, 12, 16, 20, 23.40142])
        keys.append([0.174533, 0.174533, 0.174533, 0.174533, 0.174533, 0.174533, 0.174533, 0.174533])

        names.append("LWristYaw")
        times.append([0.4, 2, 4, 8, 12, 16, 20, 23.40142])
        keys.append([0.0058311, 0.0058311, 0.0058311, 0.0058311, 0.0058311, 0.0058311, 0.0058311, 0.0058311])

        names.append("RElbowRoll")
        times.append([0.4, 2, 4, 8, 12, 16, 20, 23.40142])
        keys.append([0.519026, 0.519026, 0.519026, 0.519026, 0.519026, 0.519026, 0.519026, 0.519026])

        names.append("RElbowYaw")
        times.append([0.4, 2, 4, 8, 12, 16, 20, 23.40142])
        keys.append([1.21988, 1.21988, 1.21988, 1.21988, 1.21988, 1.21988, 1.21988, 1.21988])

        names.append("RHand")
        times.append([0.4, 2, 4, 8, 12, 16, 20, 23.40142])
        keys.append([0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9])

        names.append("RShoulderPitch")
        times.append([0.4, 2, 4, 8, 12, 16, 20, 23.40142])
        keys.append([1.56045, 1.56045, 1.56045, 1.56045, 1.56045, 1.56045, 1.56045, 1.56045])

        names.append("RShoulderRoll")
        times.append([0.4, 2, 4, 8, 12, 16, 20, 23.40142])
        keys.append([-0.149051, -0.149051, -0.149051, -0.149051, -0.149051, -0.149051, -0.149051, -0.149051])

        names.append("RWristYaw")
        times.append([0.4, 2, 4, 8, 12, 16, 20, 23.40142])
        keys.append([-0.00255457, -0.00255457, -0.00255457, -0.00255457, -0.00255457, -0.00255457, -0.00255457, -0.00255457])

        ret = dict()
        for time, key, name in zip(times, keys, names):
            ret[name] = [key, time]
        return ret

    def macarena_move(self, beats):
        names = list()
        times = list()
        keys = list()
        names.append("HeadPitch")
        times.append([0, 2, 4, 6, 8, 10, 12, 14])
        keys.append([-0.0628318, -0.0628318, -0.0628318, -0.0628318, -0.0628318, -0.0628318, -0.0628318, -0.0628318])

        names.append("HeadYaw")
        times.append([0, 2, 4, 6, 8, 9, 10, 11, 12, 13, 15])
        keys.append([0, 0, 0, 0, 0, 0, 0, 1.23569, -1.23569, 0, 0])

        names.append("HipPitch")
        times.append([0, 2, 4, 6, 8, 10, 12, 14])
        keys.append([0, 0, 0, 0, 0, 0, 0, 0])

        names.append("HipRoll")
        times.append([0, 2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15])
        keys.append([0, 0, 0, 0, 0, 0, 0, 0, 0, 0.188496, -0.188496, 0])

        names.append("KneePitch")
        times.append([0, 2, 4, 6, 8, 10, 12, 14])
        keys.append([0, 0, 0, 0, 0, 0, 0, 0])

        names.append("LElbowRoll")
        times.append([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
        keys.append([-0.436332, -0.436332, -0.436332, -0.436332, -0.436332, -0.436332, -1.48353, -1.48353, -1.13446, -1.13446, -0.436332, -0.436332, -0.436332, -0.436332, -0.436332, -0.436332])

        names.append("LElbowYaw")
        times.append([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
        keys.append([-1.22173, -1.22173, -1.22173, -1.22173, -1.22173, -1.22173, -1.39626, -1.39626, -1.22173, -1.22173, -1.22173, -1.22173, -1.22173, -1.22173, -1.22173, -1.22173])

        names.append("LHand")
        times.append([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
        keys.append([0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9])

        names.append("LShoulderPitch")
        times.append([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
        keys.append([1.5708, 1.5708, 0, 0, 0, 0, 0, 0, -0.872665, -0.872665, 1.5708, 1.5708, 1.5708, 1.5708, 1.5708, 1.5708])

        names.append("LShoulderRoll")
        times.append([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
        keys.append([0.174533, 0.174533, 0.174533, 0.174533, 0.174533, 0.174533, 0.0174533, 0.0174533, 0.174533, 0.174533, 0.174533, 0.174533, 0.174533, 0.174533, 0.174533, 0.174533])

        names.append("LWristYaw")
        times.append([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
        keys.append([0, 0, 1.309, 1.309, -1.5708, -1.5708, -1.48353, -1.48353, -1.309, -1.309, 0, 0, 0, 0, 0, 0])

        names.append("RElbowRoll")
        times.append([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15])
        keys.append([0.436332, 0.436332, 0.436332, 0.436332, 0.436332, 1.48353, 1.48353, 1.13446, 1.13446, 0.436332, 0.436332, 0.436332, 0.436332, 0.436332, 0.436332])

        names.append("RElbowYaw")
        times.append([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15])
        keys.append([1.22173, 1.22173, 1.22173, 1.22173, 1.22173, 1.39626, 1.39626, 1.22173, 1.22173, 1.22173, 1.22173, 1.22173, 1.22173, 1.22173, 1.22173])

        names.append("RHand")
        times.append([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15])
        keys.append([0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9])

        names.append("RShoulderPitch")
        times.append([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15])
        keys.append([1.5708, 0, 0, 0, 0, 0, 0, -0.872665, -0.872665, 1.5708, 1.5708, 1.5708, 1.5708, 1.5708, 1.5708])

        names.append("RShoulderRoll")
        times.append([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15])
        keys.append([-0.174533, -0.174533, -0.174533, -0.174533, -0.174533, -0.0174533, -0.0174533, -0.174533, -0.174533, -0.174533, -0.174533, -0.174533, -0.174533, -0.174533, -0.174533])

        names.append("RWristYaw")
        times.append([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15])
        keys.append([0, -1.309, -1.309, 1.5708, 1.5708, 1.48353, 1.48353, 1.309, 1.309, 0, 0, 0, 0, 0, 0])

        ret = dict()
        for time, key, name in zip(times, keys, names):
            new_time = list()
            for t in time:
                new_time.append(beats[t])
            ret[name] = [key, new_time]
        return ret]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="Repeat" inherits_from_parent="0" content_type="1" value="4" default_value="4" min="0" max="20" tooltip="" id="5" /></Box><Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" /><Link inputowner="3" indexofinput="3" outputowner="4" indexofoutput="4" /><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>